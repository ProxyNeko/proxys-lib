import net.darkhax.curseforgegradle.TaskPublishCurseForge

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'net.darkhax.curseforgegradle' version '1.0.11'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

archivesBaseName = "${mod_id}-forge-${minecraft_version}"

minecraft {
    mappings channel: 'parchment', version: "${parchment_minecraft_version}-${parchment_version}-${minecraft_version}"

    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        // This location is hardcoded in Forge and can not be changed.
        // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'

            if (project.hasProperty('mc_uuid')) {
                // Your UUID, trimmed / without the dashes
                args '--uuid', project.getProperty('mc_uuid')
            }

            if (project.hasProperty('mc_username')) {
                // Your Minecraft in-game username, not email
                args '--username', project.getProperty('mc_username')
            }

            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('runserver')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'

            args '--singleplayer', "yes", '--nogui', "true"

            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

configurations {
    testCompileOnly.extendsFrom(compileOnly)
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":Common")
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    //compileOnly(fg.deobf("mezz.jei:jei-${rootProject.jei_minecraft_version}-common-api:${rootProject.jei_version}"))
    //compileOnly(fg.deobf("mezz.jei:jei-${rootProject.jei_minecraft_version}-forge-api:${rootProject.jei_version}"))
    // at runtime, use the full JEI jar
    //runtimeOnly(fg.deobf("mezz.jei:jei-${rootProject.minecraft_version}:${rootProject.jei_version}"))
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    config "${mod_id}.mixins.json"
}

processResources {
    from project(":Common").sourceSets.main.resources
    def buildProps = project.properties.clone()

    // Replaces FML's magic file.jarVersion string with the correct version at build time.
    buildProps.put('file', [jarVersion: version])

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand buildProps
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
        }
    }
    repositories {
    }
}

task publishToCurseForge(type: TaskPublishCurseForge) {
    apiToken = project.findProperty("curseforge_api_token") ?: "invalid/no CurseForge API token found!"

    def mainFile = upload(curseforge_project_id, file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))

    mainFile.displayName = "${archivesBaseName}-${version}"
    mainFile.releaseType = curseforge_release_type
    mainFile.addModLoader("Forge")
    mainFile.addGameVersion(minecraft_version)
    mainFile.addJavaVersion(curseforge_java_version)

    //mainFile.addRequirement('fabric-api') //Fabric API slug
    //mainFile.addEmbedded('cloth-config') //Cloth Config slug
    mainFile.changelog = mod_changelog_url
}

tasks.publishToCurseForge.dependsOn tasks.assemble
