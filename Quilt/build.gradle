import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'maven-publish'
    id 'org.quiltmc.loom' version '0.12.+'
    id 'net.darkhax.curseforgegradle' version '1.0.11'
}

archivesBaseName = "${mod_id}-quilt-${minecraft_version}"

repositories {

    maven {
        name 'Quilt (Release)'
        url 'https://maven.quiltmc.org/repository/release/'
    }

    maven {
        name 'Quilt (Snapshot)'
        url 'https://maven.quiltmc.org/repository/snapshot/'
        content {
            includeGroup 'org.quiltmc.fabric_api_qsl'
            includeGroupByRegex 'org\\.quiltmc\\.qsl(?:\\.[a-z_]+)?'
        }
    }

    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
}

configurations {
    testCompileOnly.extendsFrom(compileOnly)
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft_version}:${parchment_version}@zip")
    }
    modImplementation "org.quiltmc:quilt-loader:${quilt_loader_version}"

    //modImplementation "org.quiltmc:qsl:${qsl_version}+${minecraft_version}"
    modImplementation "org.quiltmc.quilted-fabric-api:quilted-fabric-api:${quilted_fabric_api_version}-${minecraft_version}"

    implementation project(":Common")

    // Optional dependencies
    modRuntimeOnly ("com.terraformersmc:modmenu:${modmenu_version}") {
        exclude group: 'net.fabricmc.fabric-api'
    }
}

loom {
    if (project.hasProperty('quilt_aws_enabled') && project.findProperty('quilt_aws_enabled').toBoolean()) {
        accessWidenerPath = file("src/main/resources/${mod_id}.accessWidener")
        project.logger.debug('Quilt Access Widener are enabled for this project.')
    }
    runs {
        client {
            client()
            setConfigName("Quilt Client")
            ideConfigGenerated(true)
            runDir("run")

            if (project.hasProperty('mc_uuid')) {
                // Your UUID, trimmed / without the dashes
                programArgs('--uuid', project.getProperty('mc_uuid'))
            }

            if (project.hasProperty('mc_username')) {
                // Your Minecraft in-game username, not email
                programArgs('--username', project.getProperty('mc_username'))
            }
        }
        server {
            server()
            setConfigName("Quilt Server")
            ideConfigGenerated(true)
            runDir("runserver")
            programArgs('--singleplayer', "yes", '--nogui', "true")
        }
    }
}

processResources {
    from project(":Common").sourceSets.main.resources
    def buildProps = project.properties.clone()

    filesMatching(['quilt.mod.json', 'pack.mcmeta']) {
        expand buildProps
    }
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
        }
    }

    repositories {
    }
}

task publishToCurseForge(type: TaskPublishCurseForge) {
    apiToken = project.findProperty("curseforge_api_token") ?: "invalid/no CurseForge API token found!"

    def mainFile = upload(curseforge_project_id, file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))

    mainFile.displayName = "${archivesBaseName}-${version}"
    mainFile.releaseType = curseforge_release_type
    mainFile.addModLoader("Quilt")
    mainFile.addGameVersion(minecraft_version)
    mainFile.addJavaVersion(curseforge_java_version)

    //mainFile.addRequirement('fabric-api') //Fabric API slug
    //mainFile.addEmbedded('cloth-config') //Cloth Config slug
    mainFile.changelog = mod_changelog_url
}

tasks.publishToCurseForge.dependsOn tasks.assemble
